<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="namespace_sirene_analizer" kind="namespace" language="Python">
    <compoundname>SireneAnalizer</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespace_sirene_analizer_1a6e171306ccfbb83ca3c0bf3b15e71d05" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string SireneAnalizer.reducted_name</definition>
        <argsstring></argsstring>
        <name>reducted_name</name>
        <initializer>=  &quot;input\\base_sirene_shortened_json_cpp.json&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="essais/gis/SireneAnalizer.py" line="33" column="1" bodyfile="essais/gis/SireneAnalizer.py" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_sirene_analizer_1aae334d372d85590f4053e78e9316915a" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string SireneAnalizer.clusterized_path</definition>
        <argsstring></argsstring>
        <name>clusterized_path</name>
        <initializer>=  &quot;output\\clusterized_sirene.html&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="essais/gis/SireneAnalizer.py" line="35" column="1" bodyfile="essais/gis/SireneAnalizer.py" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_sirene_analizer_1a3d7c2fd94c1c0ace576182fb6b2ab9f8" prot="public" static="no" mutable="no">
        <type>def</type>
        <definition>SireneAnalizer.data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <initializer>=  <ref refid="namespace_sirene_analizer_1a553fe358625a6b3553900d6693d9b7a3" kindref="member">ouvrir</ref>(<ref refid="namespace_sirene_analizer_1a6e171306ccfbb83ca3c0bf3b15e71d05" kindref="member">reducted_name</ref>, reduce=True)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="essais/gis/SireneAnalizer.py" line="308" column="1" bodyfile="essais/gis/SireneAnalizer.py" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_sirene_analizer_1a4aec614441f405b6de55f1f1d4c296f4" prot="public" static="no" mutable="no">
        <type>def</type>
        <definition>def SireneAnalizer.data_0</definition>
        <argsstring></argsstring>
        <name>data_0</name>
        <initializer>=  data.copy()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="essais/gis/SireneAnalizer.py" line="309" column="1" bodyfile="essais/gis/SireneAnalizer.py" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_sirene_analizer_1ae931a4d1c915fcb3740cadcc9f055797" prot="public" static="no" mutable="no">
        <type></type>
        <definition>SireneAnalizer.centroids</definition>
        <argsstring></argsstring>
        <name>centroids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="essais/gis/SireneAnalizer.py" line="311" column="1" bodyfile="essais/gis/SireneAnalizer.py" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespace_sirene_analizer_1a6a98f05a3a1b90e3c880ecaab3534e66" prot="public" static="no" mutable="no">
        <type></type>
        <definition>SireneAnalizer.hulls</definition>
        <argsstring></argsstring>
        <name>hulls</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="essais/gis/SireneAnalizer.py" line="313" column="1" bodyfile="essais/gis/SireneAnalizer.py" bodystart="313" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespace_sirene_analizer_1ac87b12118762b23663d60ab067116884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def SireneAnalizer.swap_xy</definition>
        <argsstring>(BaseGeometry geom)</argsstring>
        <name>swap_xy</name>
        <param>
          <type>BaseGeometry</type>
          <declname>geom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Inverse les coordonnées de l&apos;objet shapely.geometry.
Utile pour passer objets shapely dans folium (la convention est inversée)
:param geom: l&apos;objet dont on veut inverser les coordonnées (Point, Polygon, MultiPolygon, etc.)
:return: l&apos;objet inversé
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="essais/gis/SireneAnalizer.py" line="39" column="1" bodyfile="essais/gis/SireneAnalizer.py" bodystart="39" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespace_sirene_analizer_1ae9da2463d6618661f0e07049e70ea45f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def SireneAnalizer.range_hex_colors</definition>
        <argsstring>(int nombre_couleurs)</argsstring>
        <name>range_hex_colors</name>
        <param>
          <type>int</type>
          <declname>nombre_couleurs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="essais/gis/SireneAnalizer.py" line="75" column="1" bodyfile="essais/gis/SireneAnalizer.py" bodystart="75" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespace_sirene_analizer_1a553fe358625a6b3553900d6693d9b7a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def SireneAnalizer.ouvrir</definition>
        <argsstring>(str path, str column_points=&apos;geometry&apos;, bool reduce=False, bool do_filter=True)</argsstring>
        <name>ouvrir</name>
        <param>
          <type>str</type>
          <declname>path</declname>
        </param>
        <param>
          <type>str</type>
          <declname>column_points</declname>
          <defval>&apos;geometry&apos;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reduce</declname>
          <defval>False</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>do_filter</declname>
          <defval>True</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Ouvre la GeoDataFrame du chemin spécifié.

:param path: chemin du fichier
:param column_points: la colonne où se trouvent les points
:param reduce: si True, extrait uniquement 1000 lignes de la GeoDataFrame (pour accélérer le temps de calcul)
:param do_filter: si True, ne garde que la colonne contenant les points (allège)
:return: Retourne une GeoDataFrame. Elle ne contient pas de na. Si do_filter est True, l&apos;unique colonne porte le nom &apos;geometry&apos;.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="essais/gis/SireneAnalizer.py" line="89" column="1" bodyfile="essais/gis/SireneAnalizer.py" bodystart="89" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespace_sirene_analizer_1ad77ea7285b948e6954919e6ab003bc47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def SireneAnalizer.filter</definition>
        <argsstring>(gpd.GeoDataFrame df, str column_points=&apos;geometry&apos;, bool reduce=False, bool do_filter=True)</argsstring>
        <name>filter</name>
        <param>
          <type>gpd.GeoDataFrame</type>
          <declname>df</declname>
        </param>
        <param>
          <type>str</type>
          <declname>column_points</declname>
          <defval>&apos;geometry&apos;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>reduce</declname>
          <defval>False</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>do_filter</declname>
          <defval>True</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Filtre la GeoDataFrame : enlève les na.
Si do_filter=True, ne garde que la colonne contenant les points (allège)

:param df: la GeoDataFrame
:param column_points: la colonne où se trouvent les points
:param reduce: si True, extrait uniquement 1000 lignes de la GeoDataFrame (pour accélérer le temps de calcul)
:param do_filter: si True, ne garde que la colonne contenant les points (allège)
:return: Retourne une GeoDataFrame. Elle ne contient pas de na. Si do_filter est True, l&apos;unique colonne porte le nom &apos;geometry&apos;.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="essais/gis/SireneAnalizer.py" line="101" column="1" bodyfile="essais/gis/SireneAnalizer.py" bodystart="101" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespace_sirene_analizer_1a6b620e88100b9cde863c4642cc3b6fa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def SireneAnalizer.clusterize</definition>
        <argsstring>(gpd.GeoDataFrame df, int nb_clusters)</argsstring>
        <name>clusterize</name>
        <param>
          <type>gpd.GeoDataFrame</type>
          <declname>df</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nb_clusters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Clusterise la GeoDataFrame à l&apos;aide de la méthode des k-moyennes.
La colonne contenant les points doit s&apos;appeler &apos;geometry&apos;.
La GeoDataFrame peut contenir d&apos;autres colonnes.

:param df: la GeoDataFrame à clusteriser (les données doivent se trouver dans la colonne &apos;geometry&apos;)
:param k: le nombre de clusters
:return:
Retourne un tuple.
En premier : une GeoDataFrame identique, à ceci près que l&apos;on a ajouté les colonnes &apos;cluster&apos; et &apos;centroids&apos;.
(correspondant au numéro du cluster, et à son centre de gravité)
En deuxième, une GeoDataFrame plus simple avec une unique colonne &apos;centroids&apos;
(la ligne est le numéro de cluster, et contient le centre de gravité)
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="essais/gis/SireneAnalizer.py" line="122" column="1" bodyfile="essais/gis/SireneAnalizer.py" bodystart="122" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="namespace_sirene_analizer_1ab6f18f8ebb95d7e604945b16c88d8287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def SireneAnalizer.do_convex_hull</definition>
        <argsstring>(gpd.GeoDataFrame df)</argsstring>
        <name>do_convex_hull</name>
        <param>
          <type>gpd.GeoDataFrame</type>
          <declname>df</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>A partir de données clusterisées (le premier élément retourné par la fonction clusterize)
(cf. doc de la fonction clusterize), fabrique les enveloppes convexes.

:param df: la GeoDataFrame où les clusters ont déjà été calculés par la fonction clusterize
:return:
Retourne un tuple.
En premier : une GeoDataFrame identique, à ceci près que l&apos;on a ajouté la colonne &apos;hulls&apos;.
(correspondant à un Polygon, enveloppe convexe du cluster)
(il se peut que ce soit un Point, si le cluster ne contient qu&apos;un point, car les Polygons à un point sont interdits)
En deuxième, une GeoDataFrame plus simple avec une unique colonne &apos;hulls&apos;
(la ligne est le numéro de cluster, et contient les enveloppes convexes)
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="essais/gis/SireneAnalizer.py" line="213" column="1" bodyfile="essais/gis/SireneAnalizer.py" bodystart="213" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespace_sirene_analizer_1a623943683b810b29f136d02fdb8da7e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def SireneAnalizer.save_to_map</definition>
        <argsstring>(gpd.GeoDataFrame centroids, gpd.GeoDataFrame hulls, str path=clusterized_path, gpd.GeoDataFrame df=None)</argsstring>
        <name>save_to_map</name>
        <param>
          <type>gpd.GeoDataFrame</type>
          <declname>centroids</declname>
        </param>
        <param>
          <type>gpd.GeoDataFrame</type>
          <declname>hulls</declname>
        </param>
        <param>
          <type>str</type>
          <declname>path</declname>
          <defval><ref refid="namespace_sirene_analizer_1aae334d372d85590f4053e78e9316915a" kindref="member">clusterized_path</ref></defval>
        </param>
        <param>
          <type>gpd.GeoDataFrame</type>
          <declname>df</declname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Sauvegarde les centres de gravité des clusters, ainsi que les enveloppes convexes, dans une carte Leaflet
:param centroids: les centres de gravité (cf. deuxième sortie de la fonction clusterize)
:param hulls: les enveloppes convesxes (cf. deuxième sortie de la fonction do_convex_hull)
:param path: le chemin
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="essais/gis/SireneAnalizer.py" line="256" column="1" bodyfile="essais/gis/SireneAnalizer.py" bodystart="256" bodyend="307"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="essais/gis/SireneAnalizer.py" line="1" column="1"/>
  </compounddef>
</doxygen>
