<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="fr">
  <compounddef id="clusterizer__utils_8py" kind="file" language="Python">
    <compoundname>clusterizer_utils.py</compoundname>
    <innernamespace refid="namespaceclusterizer__utils">clusterizer_utils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespaceclusterizer__utils" refkind="compound"><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="2"><highlight class="stringliteral">Ce<sp/>module<sp/>permet<sp/>d&apos;extraire<sp/>simplement<sp/>nos<sp/>données<sp/>des<sp/>GeoDataFrames,<sp/>de<sp/>trouver</highlight></codeline>
<codeline lineno="3"><highlight class="stringliteral">leurs<sp/>coordonnées,<sp/>de<sp/>restreindre<sp/>le<sp/>calcul<sp/>aux<sp/>points<sp/>situés<sp/>dans<sp/>un<sp/>certain<sp/>rayon</highlight></codeline>
<codeline lineno="4"><highlight class="stringliteral">autour<sp/>de<sp/>Paris<sp/>;<sp/>il<sp/>permet<sp/>également<sp/>de<sp/>manipuler<sp/>les<sp/>clusters,<sp/>de<sp/>calculer<sp/>leur<sp/></highlight></codeline>
<codeline lineno="5"><highlight class="stringliteral">poids<sp/>et<sp/>leur<sp/>taille.</highlight></codeline>
<codeline lineno="6"><highlight class="stringliteral">&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>typing<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Callable</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>geopandas<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>gpd</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>numpy<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>np</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>pandas<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>pd</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>pandas<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Series</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>shapely.geometry<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Polygon,<sp/>MultiPoint,<sp/>Point,<sp/>LineString,<sp/>GeometryCollection</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="namespaceclusterizer__utils_1a397067a131fa29bb2e32f07c6cd9b550" refkind="member"><highlight class="normal">COLUMN_DEFAULT_GEOMETRY_NAME<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;geometry&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="namespaceclusterizer__utils_1a873ebb1d1738daa81932454c8402f4ac" refkind="member"><highlight class="normal">COLUMN_CLUSTER_INDEX_NAME<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cluster&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="namespaceclusterizer__utils_1a64da067438d51e82bf9fca50329b9575" refkind="member"><highlight class="normal">COLUMN_HULLS_NAME<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;hulls&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="namespaceclusterizer__utils_1a0e0d5e7941920e45cabf19445ce767e0" refkind="member"><highlight class="normal">COLUMN_CENTROIDS_NAME<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;centroids&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="namespaceclusterizer__utils_1af162587a76482f328d73ed57c2b044b8" refkind="member"><highlight class="normal">COLUMN_CLUSTER_SIZE_NAME<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;taille&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="namespaceclusterizer__utils_1a4366078253ba0edbda360ae6cc9d1add" refkind="member"><highlight class="normal">COLUMN_CLUSTER_MASS_NAME<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;poids&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="namespaceclusterizer__utils_1a02138575682c57bd3a59b63bae3dfb38" refkind="member"><highlight class="normal">PARIS_CENTER_COORDS<sp/>=<sp/>Point(2.348523,<sp/>48.853345)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=====================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Fonctions<sp/>principales</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=====================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="namespaceclusterizer__utils_1a5788fa8785e88a80e5a1e584c04ec05b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceclusterizer__utils_1a5788fa8785e88a80e5a1e584c04ec05b" kindref="member">get_infos_clusters_poids</ref>(df:<sp/>pd.DataFrame,<sp/>column_naf_code:<sp/>str)<sp/>-&gt;<sp/>pd.DataFrame:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Fonction<sp/>permettant<sp/>de<sp/>récupérer<sp/>des<sp/>infos<sp/>sur<sp/>les<sp/>clusters<sp/>(poids).</highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>df:<sp/>La<sp/>DataFrame<sp/>où<sp/>l&apos;on<sp/>a<sp/>déjà<sp/>ajouté<sp/>le<sp/>numéro<sp/>des<sp/>clusters<sp/>(laissée<sp/>intacte).</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>column_naf_code:<sp/>Le<sp/>nom<sp/>de<sp/>la<sp/>colonne<sp/>où<sp/>se<sp/>situent<sp/>les<sp/>codes<sp/>NAF.</highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:return:<sp/>Une<sp/>nouvelle<sp/>GeoDataFrame<sp/>associant<sp/>à<sp/>chaque<sp/>numéro<sp/>de<sp/>cluster<sp/>le<sp/>poids<sp/>de<sp/>celui-ci</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>series_poids<sp/>=<sp/>df.groupby(COLUMN_CLUSTER_INDEX_NAME).apply(<ref refid="namespaceclusterizer__utils_1abf24cd2d20d3d162a4d02efc242acdbc" kindref="member">calculer_poids_cluster_wrapper</ref>(column_naf_code))</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pd.DataFrame(Series(series_poids),<sp/>columns=[COLUMN_CLUSTER_MASS_NAME])</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="namespaceclusterizer__utils_1a1a09a2a4d0cb4435e9341da24dde35df" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceclusterizer__utils_1a1a09a2a4d0cb4435e9341da24dde35df" kindref="member">get_infos_clusters_taille</ref>(df:<sp/>pd.DataFrame)<sp/>-&gt;<sp/>pd.DataFrame:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Fonction<sp/>permettant<sp/>de<sp/>récupérer<sp/>des<sp/>infos<sp/>sur<sp/>les<sp/>clusters<sp/>(tailles).</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>df:<sp/>La<sp/>DataFrame<sp/>où<sp/>l&apos;on<sp/>a<sp/>déjà<sp/>ajouté<sp/>le<sp/>numéro<sp/>des<sp/>clusters<sp/>(laissée<sp/>intacte).</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:return:<sp/>Une<sp/>nouvelle<sp/>GeoDataFrame<sp/>associant<sp/>à<sp/>chaque<sp/>numéro<sp/>de<sp/>cluster<sp/>la<sp/>taille<sp/>de<sp/>celui-ci</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>(nombre<sp/>d&apos;établissements)</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pd.DataFrame(df.groupby(COLUMN_CLUSTER_INDEX_NAME).size(),<sp/>columns=[COLUMN_CLUSTER_SIZE_NAME])</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="namespaceclusterizer__utils_1a67d3497ffce20f00b8670186e255a548" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceclusterizer__utils_1a67d3497ffce20f00b8670186e255a548" kindref="member">get_infos_clusters_enveloppes_convexes</ref>(k:<sp/>int,<sp/>df:<sp/>pd.DataFrame,<sp/>column_geometry:<sp/>str<sp/>=<sp/>COLUMN_DEFAULT_GEOMETRY_NAME,<sp/>is_dict:<sp/>bool<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">)<sp/>-&gt;<sp/>pd.DataFrame:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Fonction<sp/>permettant<sp/>de<sp/>récupérer<sp/>des<sp/>infos<sp/>sur<sp/>les<sp/>clusters<sp/>(enveloppes<sp/>convexes).</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>k:<sp/>Nombre<sp/>de<sp/>clusters</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>df:<sp/>La<sp/>DataFrame<sp/>où<sp/>l&apos;on<sp/>a<sp/>déjà<sp/>ajouté<sp/>le<sp/>numéro<sp/>des<sp/>clusters<sp/>(laissée<sp/>intacte).</highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>column_geometry:<sp/>Le<sp/>nom<sp/>de<sp/>la<sp/>colonne<sp/>où<sp/>se<sp/>situent<sp/>les<sp/>données<sp/>géometriques<sp/>(par<sp/>défaut,<sp/>&quot;geometry&quot;).</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>is_dict:<sp/>True<sp/>si<sp/>les<sp/>paramètres<sp/>sont<sp/>sous<sp/>forme<sp/>de<sp/>dictionnaire</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:return:<sp/>Une<sp/>GeoDataFrame<sp/>associant<sp/>à<sp/>chaque<sp/>numéro<sp/>de<sp/>cluster<sp/>son<sp/>enveloppe<sp/>convexe.</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Tableau<sp/>numpy<sp/>temporaire.<sp/>Il<sp/>ne<sp/>sert<sp/>qu&apos;à<sp/>la<sp/>création<sp/>de<sp/>la<sp/>GeoDataFrame<sp/>avec<sp/>les<sp/>enveloppes<sp/>convexes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>temp_hulls<sp/>=<sp/>np.empty(k,<sp/>dtype=Polygon)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>n<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>range(k):</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Cette<sp/>DataFrame<sp/>contient<sp/>les<sp/>points<sp/>du<sp/>cluster<sp/>numéro<sp/>n</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minidf<sp/>=<sp/>df.loc[df[COLUMN_CLUSTER_INDEX_NAME]<sp/>==<sp/>n]</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>On<sp/>calcule<sp/>l&apos;enveloppe<sp/>convexe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points<sp/>=<sp/>minidf.loc[:,<sp/>column_geometry]</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_dict:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points<sp/>=<sp/>gpd.points_from_xy(points.apply(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>p:<sp/>p[</highlight><highlight class="stringliteral">&quot;coordinates&quot;</highlight><highlight class="normal">][0]),</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>points.apply(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>p:<sp/>p[</highlight><highlight class="stringliteral">&quot;coordinates&quot;</highlight><highlight class="normal">][1]))</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multi_point<sp/>=<sp/>MultiPoint(np.array(points,<sp/>dtype=Point))</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multi_point<sp/>=<sp/>MultiPoint(points.array)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hull<sp/>=<sp/>multi_point.convex_hull</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>type(hull)<sp/>==<sp/>Point<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>type(hull)<sp/>==<sp/>LineString<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>type(hull)<sp/>==<sp/>GeometryCollection:</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>S&apos;il<sp/>n&apos;y<sp/>a<sp/>qu&apos;un<sp/>point<sp/>dans<sp/>le<sp/>cluster,<sp/>on<sp/>ne<sp/>peut<sp/>pas<sp/>créer<sp/>de<sp/>Polygon</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_hulls[n]<sp/>=<sp/>hull</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp_hulls[n]<sp/>=<sp/>Polygon(hull)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gpd.GeoDataFrame(gpd.GeoSeries(temp_hulls),<sp/>columns=[COLUMN_HULLS_NAME])</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=====================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Fonctions<sp/>utilitaires</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">#<sp/>=====================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="namespaceclusterizer__utils_1afa94fd0c30cb29c6f3a78387cc167e89" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceclusterizer__utils_1afa94fd0c30cb29c6f3a78387cc167e89" kindref="member">calculer_poids_code_NAF</ref>(code_naf:<sp/>str)<sp/>-&gt;<sp/>int:</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Calcule<sp/>le<sp/>poids<sp/>d&apos;un<sp/>code<sp/>NAF.</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>code_naf:<sp/>Le<sp/>code<sp/>NAF<sp/>à<sp/>calculer<sp/>(dans<sp/>une<sp/>des<sp/>deux<sp/>conventions<sp/>:<sp/>avec<sp/>ou<sp/>sans<sp/>points).</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:return:<sp/>Le<sp/>poids<sp/>du<sp/>code<sp/>NAF.</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>debut<sp/>=<sp/>int(str(code_naf)[0:2])</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>49<sp/>&lt;=<sp/>debut<sp/>&lt;=<sp/>56:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="namespaceclusterizer__utils_1affa7c2c6862dc269e97b6b0bfa95a4da" refkind="member"><highlight class="normal">vectorized_calculer_poids_code_NAF<sp/>=<sp/>np.vectorize(calculer_poids_code_NAF,<sp/>otypes=[int])</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="namespaceclusterizer__utils_1aba2719bff914168ef7fd424000278568" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceclusterizer__utils_1aba2719bff914168ef7fd424000278568" kindref="member">calculer_poids_cluster</ref>(df:<sp/>pd.DataFrame,<sp/>naf_column_name:<sp/>str)<sp/>-&gt;<sp/>int:</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Calcule<sp/>le<sp/>poids<sp/>d&apos;un<sp/>ensemble<sp/>d&apos;établissements.</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>df:<sp/>La<sp/>DataFrame<sp/>contenant<sp/>tous<sp/>les<sp/>établissements.</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>Rien<sp/>n&apos;est<sp/>requis,<sp/>à<sp/>part<sp/>avoir<sp/>une<sp/>colonne<sp/>où<sp/>sont<sp/>situés<sp/>les<sp/>codes<sp/>NAF.</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>naf_column_name:<sp/>Le<sp/>nom<sp/>de<sp/>la<sp/>colonne<sp/>contenant<sp/>les<sp/>codes<sp/>NAF.</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:returns:<sp/>Le<sp/>poids<sp/>du<sp/>cluster.</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>np.sum(<ref refid="namespaceclusterizer__utils_1affa7c2c6862dc269e97b6b0bfa95a4da" kindref="member">vectorized_calculer_poids_code_NAF</ref>(df[naf_column_name]))</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="namespaceclusterizer__utils_1abf24cd2d20d3d162a4d02efc242acdbc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceclusterizer__utils_1abf24cd2d20d3d162a4d02efc242acdbc" kindref="member">calculer_poids_cluster_wrapper</ref>(naf_column_name:<sp/>str)<sp/>-&gt;<sp/>Callable[[pd.DataFrame,<sp/>str],<sp/>int]:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Wrappe<sp/>calculer_poids_cluster<sp/>pour<sp/>pouvoir<sp/>l&apos;utiliser<sp/>dans<sp/>un<sp/>groupby.</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>naf_column_name:<sp/>La<sp/>colonne<sp/>où<sp/>se<sp/>situent<sp/>les<sp/>codes<sp/>NAF.</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:return:<sp/>cf.<sp/>la<sp/>fonction<sp/>calculer_poids_cluster.</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">fct(df):</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceclusterizer__utils_1aba2719bff914168ef7fd424000278568" kindref="member">calculer_poids_cluster</ref>(df,<sp/>naf_column_name)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fct</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="namespaceclusterizer__utils_1ab8828a4ec46c57e4c2fbcea7c314bb38" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceclusterizer__utils_1ab8828a4ec46c57e4c2fbcea7c314bb38" kindref="member">swap_xy</ref>(geom):</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Inverse<sp/>les<sp/>coordonnées<sp/>de<sp/>l&apos;objet<sp/>shapely.geometry.</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Utile<sp/>pour<sp/>passer<sp/>objets<sp/>shapely<sp/>dans<sp/>folium<sp/>(la<sp/>convention<sp/>est<sp/>inversée).</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Auteur<sp/>:<sp/>https://gis.stackexchange.com/a/291293</highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>geom:<sp/>L&apos;objet<sp/>dont<sp/>on<sp/>veut<sp/>inverser<sp/>les<sp/>coordonnées<sp/>(Point,<sp/>Polygon,<sp/>MultiPolygon,<sp/>etc.)</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:return:<sp/>l&apos;objet<sp/>inversé</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>geom.is_empty:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>geom</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>geom.has_z:</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">swap_xy_coords(coords):</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x,<sp/>y,<sp/>z<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>coords:</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>(y,<sp/>x,<sp/>z)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">swap_xy_coords(coords):</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x,<sp/>y<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>coords:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>(y,<sp/>x)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Process<sp/>coordinates<sp/>from<sp/>each<sp/>supported<sp/>geometry<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>geom.type<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&apos;Point&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;LineString&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;LinearRing&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type(geom)(list(swap_xy_coords(geom.coords)))</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>geom.type<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;Polygon&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ring<sp/>=<sp/>geom.exterior</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shell<sp/>=<sp/>type(ring)(list(swap_xy_coords(ring.coords)))</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>holes<sp/>=<sp/>list(geom.interiors)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>pos,<sp/>ring<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(holes):</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>holes[pos]<sp/>=<sp/>type(ring)(list(swap_xy_coords(ring.coords)))</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type(geom)(shell,<sp/>holes)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>geom.type.startswith(</highlight><highlight class="stringliteral">&apos;Multi&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>geom.type<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;GeometryCollection&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Recursive<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type(geom)([<ref refid="namespaceclusterizer__utils_1ab8828a4ec46c57e4c2fbcea7c314bb38" kindref="member">swap_xy</ref>(part)<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>part<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>geom.geoms])</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>ValueError(</highlight><highlight class="stringliteral">&apos;Type<sp/>%r<sp/>not<sp/>recognized&apos;</highlight><highlight class="normal"><sp/>%<sp/>geom.type)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="namespaceclusterizer__utils_1ae02c5cdf4a0f5c7987cb6eb76575b39d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceclusterizer__utils_1ae02c5cdf4a0f5c7987cb6eb76575b39d" kindref="member">filter_nearby_paris</ref>(df:<sp/>pd.DataFrame,<sp/>radius:<sp/>int,<sp/>column_geometry:<sp/>str<sp/>=<sp/>COLUMN_DEFAULT_GEOMETRY_NAME,<sp/>is_dict:<sp/>bool<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">)<sp/>-&gt;<sp/>pd.DataFrame:</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Filtre<sp/>les<sp/>données<sp/>proches<sp/>du<sp/>centre<sp/>de<sp/>Paris.</highlight></codeline>
<codeline lineno="185"><highlight class="stringliteral"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>df:<sp/>la<sp/>DataFrame<sp/>à<sp/>filtrer</highlight></codeline>
<codeline lineno="187"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>radius:<sp/>le<sp/>rayon<sp/>(en<sp/>kilomètres)</highlight></codeline>
<codeline lineno="188"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>column_geometry:<sp/>la<sp/>colonne<sp/>où<sp/>se<sp/>trouvent<sp/>les<sp/>données<sp/>géométriques<sp/>(par<sp/>défaut<sp/>:<sp/>&apos;geometry&apos;)</highlight></codeline>
<codeline lineno="189"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:return:<sp/>la<sp/>DataFrame<sp/>filtrée</highlight></codeline>
<codeline lineno="190"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>X<sp/>=<sp/><ref refid="namespaceclusterizer__utils_1a4aab52450ec0e5c333c03f2cfa4694e2" kindref="member">get_coords_from_object</ref>(df,<sp/>column_geometry,<sp/>is_dict)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>l1<sp/>=<sp/>np.pi/180*PARIS_CENTER_COORDS.y</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>L1<sp/>=<sp/>np.pi/180*PARIS_CENTER_COORDS.x</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>l2<sp/>=<sp/>np.pi/180*X[:,1]</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>L2<sp/>=<sp/>np.pi/180*X[:,0]</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>distances<sp/>=<sp/>20000/np.pi<sp/>*<sp/>(np.arccos(np.sin(l1)*np.sin(l2)<sp/>+<sp/>np.cos(l1)*np.cos(l2)*np.cos(L1-L2)))</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>masque<sp/>=<sp/>distances<sp/>&lt;=<sp/>radius</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>df[masque].reset_index(drop=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="namespaceclusterizer__utils_1a4aab52450ec0e5c333c03f2cfa4694e2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespaceclusterizer__utils_1a4aab52450ec0e5c333c03f2cfa4694e2" kindref="member">get_coords_from_object</ref>(df:<sp/>pd.DataFrame,<sp/>column_geometry:<sp/>str<sp/>=<sp/>COLUMN_DEFAULT_GEOMETRY_NAME,<sp/>is_dict:<sp/>bool<sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal">)<sp/>-&gt;<sp/>np.ndarray:</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="205"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Récupère<sp/>les<sp/>coordonnées<sp/>des<sp/>points<sp/>de<sp/>la<sp/>DataFrame.</highlight></codeline>
<codeline lineno="206"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="207"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>df:<sp/>la<sp/>DataFrame.</highlight></codeline>
<codeline lineno="208"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>column_geometry:<sp/>la<sp/>colonne<sp/>contenant<sp/>les<sp/>données<sp/>géométriques.</highlight></codeline>
<codeline lineno="209"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:param<sp/>is_dict:<sp/>les<sp/>données<sp/>sont-elles<sp/>en<sp/>dictionnaire<sp/>?</highlight></codeline>
<codeline lineno="210"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>:return:<sp/>les<sp/>coordonnées<sp/>sous<sp/>la<sp/>forme<sp/>d&apos;une<sp/>matrice<sp/>de<sp/>deux<sp/>colonnes<sp/>(et<sp/>d&apos;autant<sp/>de<sp/>lignes<sp/>qu&apos;il<sp/>y<sp/>a<sp/>de<sp/>points)</highlight></codeline>
<codeline lineno="211"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>is_dict:</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>pd.Series(df[column_geometry].apply(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>p:<sp/>p[</highlight><highlight class="stringliteral">&quot;coordinates&quot;</highlight><highlight class="normal">][0]))</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>pd.Series(df[column_geometry].apply(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>p:<sp/>p[</highlight><highlight class="stringliteral">&quot;coordinates&quot;</highlight><highlight class="normal">][1]))</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>=<sp/>np.column_stack((a,<sp/>b))</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>=<sp/>pd.Series(df[column_geometry].apply(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>p:<sp/>p.x))</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>pd.Series(df[column_geometry].apply(</highlight><highlight class="keyword">lambda</highlight><highlight class="normal"><sp/>p:<sp/>p.y))</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X<sp/>=<sp/>np.column_stack((a,<sp/>b))</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X</highlight></codeline>
    </programlisting>
    <location file="src/clusterizer/utils/clusterizer_utils.py"/>
  </compounddef>
</doxygen>
